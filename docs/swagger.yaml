openapi: 3.0.0

info:
  title: CNodejs.org
  description: API v2 for cnodejs.org
  version: 2.0.0

servers:
  - url: https://api.cnodejs.org
    description: Beta Version For DEV.

tags:
  - name: OAuth
    description: /oauth
  - name: Auth
    description: /api/auth
  - name: User
    description: /api/v2/user
  - name: Topic
    description: /api/v2/topic
  - name: Rank
    description: /api/v2/rank
  - name: Reply
    description: /api/v2/reply

paths:
  /oauth:
    get:
      summary: get oauth info
      tags:
        - OAuth
      parameters:
        - name: callbackUrl
          in: query
          description: callback url
          schema:
            type: string
      responses:
        '200':
          description: oauth info
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      githubOAuthUrl:
                        type: string

  /oauth/github:
    get:
      summary: oauth and redirect
      tags:
        - OAuth
      parameters:
        - name: code
          in: query
          description: exchange code
          schema:
            type: string
        - name: callbackUrl
          in: query
          description: redirect url
          schema:
            type: string

      responses:
        '200':
          description: object with user and jwt token
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      type:
                        type: string
                      user:
                        $ref: '#/components/schemas/UserModel'
        '302':
          description: if redirect url has been added to oauth url
        '400':
          description: invalid code / token

  /auth/signin:
    post:
      summary: sign in a account
      tags:
        - Auth
      requestBody:
        description: loginname / email is required.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pass
              properties:
                loginname:
                  type: string
                email:
                  type: string
                pass:
                  type: string
      responses:
        '200':
          description: object with user and jwt token
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserModel'
                      token:
                        type: string
        '400':
          description: loginname or email is not existed
        '422':
          description: loginname or email is required
        '403':
          description: password is not matched

  /auth/signup:
    post:
      summary: sign up a account
      tags:
        - Auth
      requestBody:
        description: loginname / email is required.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pass
              properties:
                loginname:
                  type: string
                email:
                  type: string
                pass:
                  type: string
                rePass:
                  type: string
      responses:
        '200':
          description: object with user and jwt token
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserModel'
        '422':
          description: unprocessable entity
        '400':
          description: loginname or email has been used
        '403':
          description: public registration is not allowed

  /api/v2/user/{loginname}:
    get:
      summary: query user info
      tags:
        - User
      parameters:
        - name: loginname
          in: path
          description: Login Name
          required: true
          schema:
            type: string
      responses:
        '400':
          description: user is not existed
        '200':
          description: user detail info
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserDetailModel'

  /api/v2/user/{loginname}/block:
    put:
      summary: block a user
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: loginname
          in: path
          description: Login Name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: create result
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      result:
                        $ref: '#/components/schemas/ResultModel'      
        '400':
          description: user is not existed
        '422':
          description: loginname is required
        '403':
          $ref: '#/components/responses/UnauthorizedError'

  /api/v2/topic:
    get:
      summary: query topics
      tags:
        - Topic
      parameters:
        - name: limit
          in: query
          description: page size
          schema:
            type: number
        - name: page
          in: query
          description: page number, default 0
          schema:
            type: number
        - name: tab
          in: query
          description: topic tab
          schema:
            type: string
      responses:
        '200':
          description: topic list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          page:
                            type: number
                          limit:
                            type: number
                      topics:
                        type: array
                        items:
                          type: object
                          properties:
                            topic:
                              $ref: '#/components/schemas/TopicModel'
                            author:
                              $ref: '#/components/schemas/AuthorModel'
    post:
      summary: create a topic
      tags:
        - Topic
      security:
        - bearerAuth: []
      requestBody:
        description: topic body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicModel'
      responses:
        '200':
          description: create result
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      topic:
                        $ref: '#/components/schemas/TopicModel'
        '422':
          description: unprocessable entity
        '403':
          $ref: '#/components/responses/UnauthorizedError'

  /api/v2/topic/{topicId}:
    get:
      summary: get a topic
      tags:
        - Topic
      parameters:
        - name: topicId
          in: path
          description: Topic Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: topic detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      topic:
                        $ref: '#/components/schemas/TopicModel'
                      author:
                        $ref: '#/components/schemas/AuthorModel'
                      replies:
                        type: array
                        items:
                          type: object
                          properties:
                            content:
                              type: string
                            author:
                              $ref: '#/components/schemas/AuthorModel'
        '403':
          description: topic has been locked / deleted
    put:
      summary: update a topic
      tags:
        - Topic
      security:
        - bearerAuth: []
      parameters:
        - name: topicId
          in: path
          description: Topic Id
          required: true
          schema:
            type: string
      requestBody:
        description: topic body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicModel'
      responses:
        '200':
          description: update result
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      result:
                        $ref: '#/components/schemas/ResultModel'
        '422':
          description: unprocessable entity
        '403':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: delete a topic
      tags:
        - Topic
      security:
        - bearerAuth: []
      parameters:
        - name: topicId
          in: path
          description: Topic Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: delete result
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      result:
                        $ref: '#/components/schemas/ResultModel'
        '403':
          $ref: '#/components/responses/UnauthorizedError'

  /api/v2/topic/{topicId}/reply:
    post:
      summary: create a reply
      tags:
        - Topic
      security:
        - bearerAuth: []
      parameters:
        - name: topicId
          in: path
          description: Topic Id
          required: true
          schema:
            type: string
      requestBody:
        description: reply body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplyModel'
      responses:
        '200':
          description: create result
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      topic:
                        $ref: '#/components/schemas/TopicModel'
        '422':
          description: unprocessable entity
        '403':
          $ref: '#/components/responses/UnauthorizedError'
          
  /api/v2/reply/{replyId}:
    put:
      summary: update a reply
      tags:
        - Reply
      security:
        - bearerAuth: []
      parameters:
        - name: replyId
          in: path
          description: Reply Id
          required: true
          schema:
            type: string
      requestBody:
        description: reply body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplyModel'
      responses:
        '200':
          description: delete result
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      result:
                        $ref: '#/components/schemas/ResultModel'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: delete a reply
      tags:
        - Reply
      security:
        - bearerAuth: []
      parameters:
        - name: replyId
          in: path
          description: Reply Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: delete result
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      result:
                        $ref: '#/components/schemas/ResultModel'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
          
  /api/v2/reply/{replyId}/ups:
    put:
      summary: update a reply - ups
      tags:
        - Reply
      security:
        - bearerAuth: []
      parameters:
        - name: replyId
          in: path
          description: Reply Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: delete result
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      result:
                        $ref: '#/components/schemas/ResultModel'
        '403':
          $ref: '#/components/responses/UnauthorizedError'

  /v2/rank/users:
    get:
      summary: query users
      tags:
        - Rank
      parameters:
        - name: limit
          in: query
          description: limit mumber
          schema:
            type: number
      responses:
        '200':
          description: rank list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      tops:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserDetailModel'

  /v2/rank/no_reply_topics:
    get:
      summary: query no_reply topics
      tags:
        - Rank
      responses:
        '200':
          description: topic list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      no_reply_topics:
                        type: array
                        items:
                          $ref: '#/components/schemas/TopicModel'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: access token is missing or invalid

  schemas:
    AuthorModel:
      title: Author Model
      type: object
      properties:
        id:
          type: string
        loginname:
          type: string
        avatar_url:
          type: string

    UserModel:
      title: User Model
      type: object
      properties:
        id:
          type: string
        loginname:
          type: string
        avatar_url:
          type: string

    UserDetailModel:
      title: User Detail Model
      type: object
      properties:
        id:
          type: string
        loginname:
          type: string
        avatar_url:
          type: string
        score:
          type: number
        topic_count:
          type: number
        reply_count:
          type: number
        follower_count:
          type: number
        following_count:
          type: number
        update_at:
          type: number
        create_at:
          type: number
        name:
          type: string
        signature:
          type: string
        url:
          type: string
        weibo:
          type: string

    TopicModel:
      title: Topic Model
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        tab:
          type: string
        author_id:
          type: string
        create_at:
          type: number
        update_at:
          type: number
        deleted:
          type: boolean
        top:
          type: boolean
        good:
          type: boolean
        lock:
          type: boolean
        reply_count:
          type: number
        visit_count:
          type: number
        collect_count:
          type: number
        last_reply:
          type: string
        last_reply_at:
          type: number
          
    ReplyModel:
      title: Reply Model
      type: object
      properties:
        content:
          type: string
        content_is_html:
          type: boolean
        create_at:
          type: number
        update_at:
          type: number
        deleted:
          type: boolean
        topic_id:
          type: string
        author_id:
          type: string
        reply_id:
          type: string

    ResultModel:
      title: Result Model
      type: object
      properties:
        n:
          type: number
        nModified:
          type: number
        ok:
          type: number
